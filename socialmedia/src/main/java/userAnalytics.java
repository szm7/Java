
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author saninzulphi
 */
public class userAnalytics extends javax.swing.JFrame {

    /**
     * Creates new form userAnalytics
     */
    public userAnalytics() {
        initComponents();
        connect();
        load("select * from user");
        getContentPane().add(isactivePane);
        getContentPane().add(aPanel);
        getContentPane().add(pPane);
        isactivePane.setLayout(new FlowLayout());
        aPanel.setLayout(new FlowLayout());
        pPane.setLayout(new FlowLayout());
        displayUserPosts("SELECT postid, content, likes, comments FROM Post");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    Connection con;
    PreparedStatement pat;
    DefaultTableModel def;

    public void connect() {
//        try {
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            try {
//                System.out.println("Connecting to the database...");
//                Class.forName("com.mysql.cj.jdbc.Driver");
//                System.out.println("Driver loaded...");
//                //con = DriverManager.getConnection("jdbc:mysql://localhost/Student", "root", "");
//                System.out.println("Connected to the database...");
//                con = DriverManager.getConnection("jdbc:mysql://localhost/student", "root", "");
//            } catch (SQLException ex) {
//                Logger.getLogger(j.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(j.class.getName()).log(Level.SEVERE, null, ex);
//        }
        try {
            //Class.forName("com.mycompany.mavenproject1.Prabu");
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/smAnalytics", "root", "");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(userAnalytics.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(userAnalytics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        isactivePane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        srchBtn = new java.awt.Button();
        clrBtn = new java.awt.Button();
        aPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        button1 = new java.awt.Button();
        pPane = new javax.swing.JPanel();
        scrollbar1 = new java.awt.Scrollbar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "user", "email", "registration date"
            }
        ));
        jScrollPane1.setViewportView(userTable);

        jLabel1.setText("User Active Status");

        javax.swing.GroupLayout isactivePaneLayout = new javax.swing.GroupLayout(isactivePane);
        isactivePane.setLayout(isactivePaneLayout);
        isactivePaneLayout.setHorizontalGroup(
            isactivePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(isactivePaneLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 52, Short.MAX_VALUE))
        );
        isactivePaneLayout.setVerticalGroup(
            isactivePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(isactivePaneLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        srchBtn.setActionCommand("Search");
        srchBtn.setBackground(new java.awt.Color(153, 255, 153));
        srchBtn.setForeground(new java.awt.Color(0, 0, 0));
        srchBtn.setLabel("search");
        srchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srchBtnActionPerformed(evt);
            }
        });

        clrBtn.setBackground(new java.awt.Color(255, 255, 153));
        clrBtn.setForeground(new java.awt.Color(0, 0, 0));
        clrBtn.setLabel("clear");
        clrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aPanelLayout = new javax.swing.GroupLayout(aPanel);
        aPanel.setLayout(aPanelLayout);
        aPanelLayout.setHorizontalGroup(
            aPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        aPanelLayout.setVerticalGroup(
            aPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 334, Short.MAX_VALUE)
        );

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Oriya MN", 0, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("User Analytics");

        button1.setBackground(new java.awt.Color(255, 255, 153));
        button1.setForeground(new java.awt.Color(0, 0, 0));
        button1.setLabel("Back");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        scrollbar1.setValue(2);

        javax.swing.GroupLayout pPaneLayout = new javax.swing.GroupLayout(pPane);
        pPane.setLayout(pPaneLayout);
        pPaneLayout.setHorizontalGroup(
            pPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pPaneLayout.createSequentialGroup()
                .addGap(471, 471, 471)
                .addComponent(scrollbar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        pPaneLayout.setVerticalGroup(
            pPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollbar1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(clrBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(srchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(isactivePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(pPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))))
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clrBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(srchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(isactivePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43)))
                .addComponent(aPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(386, 386, 386))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void srchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srchBtnActionPerformed

        // TODO add your handling code here:
        String srch = txtSearch.getText();

        load("select * from user where id IN (" + srch + ")");
        displayUserStatistics(srch);
        displayUserPosts("SELECT postid, content, likes, comments FROM Post WHERE UserID = " + srch);
        JOptionPane.showMessageDialog(this, "Search Complete");        // TODO add your handling code here:
    }//GEN-LAST:event_srchBtnActionPerformed

    private void clrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrBtnActionPerformed
        // TODO add your handling code here:

        txtSearch.setText("");
        aPanel.removeAll();
        isactivePane.removeAll();
        pPane.removeAll();
        displayUserStatistics("");
        String query = "SELECT postid, content, likes, comments FROM Post";
        displayUserPosts(query);
        load("select * from user");
    }//GEN-LAST:event_clrBtnActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed
    public void load(String sql) {
        isactivePane.removeAll();
        try {
            pat = con.prepareStatement(sql);
            ResultSet rs = pat.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            int c;
            c = rss.getColumnCount();
            def = (DefaultTableModel) userTable.getModel();
            def.setRowCount(0);
            while (rs.next()) {
                Vector v = new Vector();
                for (int i = 0; i < c; i++) {
                    v.add(rs.getString("id"));
                    v.add(rs.getString("username"));
                    v.add(rs.getString("email"));
                    v.add(rs.getString("registrationdate"));
                }
                def.addRow(v);

                // Display users with specific color based on isActive status
                String username = rs.getString("username");
                String isActive = rs.getString("isActive");
                System.out.println("isActive value for " + username + " from database: " + isActive); // Add this line for debugging
                displayUserStatus(username, isActive);
            }
        } catch (SQLException ex) {
            Logger.getLogger(userAnalytics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayUserPosts(String sql) {
        try {
            // Clear the existing content in pPane
            pPane.removeAll();
            pPane.revalidate();
            pPane.repaint();

            // Fetch posts of the user from the database
            try (PreparedStatement statement = con.prepareStatement(sql)) {
                ResultSet resultSet = statement.executeQuery();

                // Display each post in pPane
                while (resultSet.next()) {
                    int postID = resultSet.getInt("postid");
                    String content = resultSet.getString("content");
                    int likes = resultSet.getInt("likes");
                    int comments = resultSet.getInt("comments");

                    JLabel postLabel = new JLabel("Post " + postID + ": " + content + " - Likes: " + likes + ", Comments: " + comments);
                    pPane.add(postLabel);
                }

                // Refresh pPane
                pPane.revalidate();
                pPane.repaint();
            }
        } catch (SQLException ex) {
            Logger.getLogger(userAnalytics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayUserStatus(String username, String isActive) {
        System.out.println("displayUserStatus called for username: " + username + ", isActive: " + isActive);

        // Heading label
        // User label
        JLabel userLabel;

        if ("true".equals(isActive)) {
            userLabel = new JLabel(username + " - Online");
            userLabel.setForeground(Color.GREEN);
        } else {
            userLabel = new JLabel(username + " - Offline");
            userLabel.setForeground(Color.RED);
        }

        isactivePane.add(userLabel);
        isactivePane.revalidate();
        isactivePane.repaint();
    }

    private int getTotalPosts(String userId) throws SQLException {
        String totalPostsQuery = "SELECT COUNT(*) AS totalPosts FROM Post WHERE UserID = " + userId;
        ResultSet result = con.createStatement().executeQuery(totalPostsQuery);
        return result.next() ? result.getInt("totalPosts") : 0;
    }

    private int getTotalViews(String userId) throws SQLException {
        String totalViewsQuery = "SELECT SUM(Views) AS totalViews FROM Analytics WHERE PostID IN (SELECT PostID FROM Post WHERE UserID = " + userId + ")";
        ResultSet result = con.createStatement().executeQuery(totalViewsQuery);
        return result.next() ? result.getInt("totalViews") : 0;
    }

    private int getTotalLikes(String userId) throws SQLException {
        // Assuming Likes is a column in the Post table
        String totalLikesQuery = "SELECT SUM(Likes) AS totalLikes FROM Post WHERE UserID = " + userId;
        ResultSet result = con.createStatement().executeQuery(totalLikesQuery);
        return result.next() ? result.getInt("totalLikes") : 0;
    }

    private int getTotalComments(String userId) throws SQLException {
        // Assuming Comments is a column in the Post table
        String totalCommentsQuery = "SELECT SUM(Comments) AS totalComments FROM Post WHERE UserID = " + userId;
        ResultSet result = con.createStatement().executeQuery(totalCommentsQuery);
        return result.next() ? result.getInt("totalComments") : 0;
    }

    private void displayUserStatistics(String userId) {
        try {

            if (userId.isEmpty()) {
                // If userId is empty, remove any existing chart from aPanel
                aPanel.removeAll();
                aPanel.revalidate();
                aPanel.repaint();
                return;
            }
            int totalPosts = getTotalPosts(userId);
            int totalViews = getTotalViews(userId);
            int totalLikes = getTotalLikes(userId);
            int totalComments = getTotalComments(userId);

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.addValue(totalPosts, "Total Posts", "User " + userId);
            dataset.addValue(totalViews, "Total Views", "User " + userId);
            dataset.addValue(totalLikes, "Total Likes", "User " + userId);
            dataset.addValue(totalComments, "Total Comments", "User " + userId);

            JFreeChart barChart = ChartFactory.createBarChart(
                    "User Statistics",
                    "User",
                    "Count",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(560, 370));
            aPanel.removeAll();
            aPanel.add(chartPanel);
            aPanel.revalidate();
            aPanel.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(userAnalytics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // ... (other methods and variable declarations)
    private CategoryDataset createDataset(String userId) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(10, "Likes", "User " + userId);
        dataset.addValue(15, "Comments", "User " + userId);
        return dataset;
    }

    private void ClearbtnActionPerformed(java.awt.event.ActionEvent evt) {

// TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(userAnalytics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(userAnalytics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(userAnalytics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(userAnalytics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new userAnalytics().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aPanel;
    private java.awt.Button button1;
    private java.awt.Button clrBtn;
    private javax.swing.JPanel isactivePane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pPane;
    private java.awt.Scrollbar scrollbar1;
    private java.awt.Button srchBtn;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

}
